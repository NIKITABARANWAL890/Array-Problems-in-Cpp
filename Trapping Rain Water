
class Solution {
public:
    int trap(vector<int>& height) {
        int n = height.size();
        if (n <= 2) return 0;

        vector<int> leftMax(n), rightMax(n);

        leftMax[0] = height[0];
        for (int i = 1; i < n; i++) {
            leftMax[i] = max(leftMax[i - 1], height[i]);
        }

        rightMax[n - 1] = height[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            rightMax[i] = max(rightMax[i + 1], height[i]);
        }

        int water_trapped = 0;
        for (int i = 1; i < n - 1; i++) {
            int min_height = min(leftMax[i], rightMax[i]);
            if (min_height > height[i]) {
                water_trapped += min_height - height[i];
            }
        }

        return water_trapped;
    }
};
